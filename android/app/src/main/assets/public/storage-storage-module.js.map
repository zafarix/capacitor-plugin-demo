{"version":3,"sources":["webpack:///./src/app/storage/storage.module.ts","webpack:///./src/app/storage/storage.page.html","webpack:///./src/app/storage/storage.page.scss","webpack:///./src/app/storage/storage.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEA;AAE7C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAWF;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAT7B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,yDAAW,CAAC;SAC5B,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB9B,86C;;;;;;;;;;;ACAA,+DAA+D,2I;;;;;;;;;;;;;;;;;ACAb;AAOlD;IAEE;IAAgB,CAAC;IAEjB,8BAAQ,GAAR;IACA,CAAC;IALU,WAAW;QALvB,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,+FAAkC;;SAEnC,CAAC;;OACW,WAAW,CAOvB;IAAD,kBAAC;CAAA;AAPuB","file":"storage-storage-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { StoragePage } from './storage.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: StoragePage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [StoragePage]\r\n})\r\nexport class StoragePageModule {}\r\n","module.exports = \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n      <ion-buttons slot=\\\"start\\\">\\r\\n        <ion-menu-button></ion-menu-button>\\r\\n      </ion-buttons>\\r\\n      <ion-title>Storage</ion-title>\\r\\n    </ion-toolbar>\\r\\n  </ion-header>\\r\\n  \\r\\n  <ion-content>\\r\\n    <ion-grid>\\r\\n      <ion-row>\\r\\n        <ion-col>\\r\\n          <ion-label>\\r\\n              The Storage API provides a key-value store for simple data. \\r\\n              Mobile OS's may periodically clear data set in window.localStorage, \\r\\n              so this API should be used instead of window.localStorage. This \\r\\n              API will fall back to using localStorage when running as a \\r\\n              Progressive Web App. Note: this API is not meant for high-performance \\r\\n              data storage applications. Take a look at using SQLite or a separate \\r\\n              data engine if your application will store a lot of items, \\r\\n              have high read/write load, or require complex querying.\\r\\n          </ion-label>\\r\\n        </ion-col>\\r\\n        <ion-col>\\r\\n          <ion-button href=\\\"https://capacitor.ionicframework.com/docs/apis/storage\\\">\\r\\n            <ion-icon slot=\\\"start\\\" name=\\\"document\\\"></ion-icon>\\r\\n            API Details\\r\\n          </ion-button>\\r\\n        </ion-col>\\r\\n        </ion-row>\\r\\n      </ion-grid>\\r\\n    \\r\\n    <ion-item-divider></ion-item-divider>\\r\\n\\r\\n    Implementation pending.\\r\\n  </ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N0b3JhZ2Uvc3RvcmFnZS5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-storage',\r\n  templateUrl: './storage.page.html',\r\n  styleUrls: ['./storage.page.scss'],\r\n})\r\nexport class StoragePage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}